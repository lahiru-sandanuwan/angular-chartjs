import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { PlotlyModule } from 'angular-plotly.js/lib/plotly.module';
import * as PlotlyJS from 'plotly.js-dist-min';
import { AnalyticsTabDataService } from '../services/analytics-tab-data.service';

@Component({
  selector: 'app-scatter-plot',
  templateUrl: './scatter-plot.component.html',
  styleUrls: ['./scatter-plot.component.scss'],
})
export class ScatterPlotComponent implements OnInit {
  graph: any;
  embeddingsPlotID: string;
  constructor(private graphInitService: AnalyticsTabDataService) {
    this.embeddingsPlotID = 'embeddingsPlotID';
    this.graph = {
      data: [],
      layout: {
        shapes: [],
      },
      config: {},
    };
  }

  ngOnInit(): void {
    console.log(this.graphInitService.isInitialized());

    // if (this.graphInitService.isInitialized()) {
    //   return;
    // }

    this.drawChart();
  }

  drawChart() {
    // Trace 1: 100 random data points
    let xValues1 = [
      0.358063480104487, -0.0245702923363036, 0.204879987024255,
      0.241123708256702, -0.215223361513115, 0.00163785174246148,
      0.323034548244799, -0.0653558374794262, 0.118436938864207,
      -0.0464137101647408, 0.156273905998095, 0.0682727651678401,
      0.0587658484830522, -0.0515533072761414, -0.18758228182734,
      0.119522730570768, -0.330271436952323, 0.202702381080994,
      0.172626084830349, -0.195355278392221, 0.112937045002899,
      -0.154972851486746, 0.149988559987766, -0.076174558304475,
      0.289662814386301, -0.172493718273341, -0.269406219741694,
      -0.169499220699043, -0.219858314972167, 0.198929650721373,
      -0.212412797278909, 0.162781907854862, -0.146201030618082,
      0.138690876108665, -0.194830205943657, -0.0513453073533668,
      0.233946654163715, 0.191273520326524, -0.0964170524748053,
      0.0909092368051116, -0.223077436324581, 0.316806106932429,
      0.43456616519203, 0.282710046474309, 0.18101938388468, 0.127566444619015,
      -0.111103474854405, -0.19974460044163, 0.162154791758949,
      -0.200878501672605, -0.0695163066992034, -0.118686971553692,
      0.431243293890266, 0.311916645178417, -0.153698517816955,
      0.148809658684439, -0.232471825479798, -0.142492318199971,
      -0.198111822831406, -0.120236919343651, -0.221194085304168,
      -0.231649973787712, -0.156272131769181, 0.091957075562415,
      0.256419900988449, 0.362524619256717, -0.129528789080531,
      -0.256227023158564, 0.328350364974486, -0.273277971638693,
      0.293555926843039, 0.154148237578086, -0.15118176380695,
      0.339191576110409, -0.171166419146258, 0.183725120682881,
      -0.0875035060745053, -0.171436102904359, 0.127749821222221,
      0.199284619178032, -0.11780179520513, 0.294157436441529,
      0.147654240688808, 0.233481519788511, -0.334203837605672,
      -0.262549225625509, 0.132417494548924, 0.294404150945062,
      -0.19243039542443, -0.0719390315309167, -0.0612805304186061,
      0.247577802223667, -0.0334146054452578, 0.255434234394645,
      -0.091248473814153, 0.319638145702228, 0.155301355465106,
    ];
    let yValues1 = [
      -0.177425374371042, -0.152631814785433, -0.175639043789448,
      -0.138524640808367, 0.0283738371260803, 0.124747593916714,
      -0.0666646277572725, 0.152575933330945, -0.138050628130715,
      -0.145043174153021, 0.125702534802368, -0.0351047676322321,
      0.0291759457552326, 0.0835902738314918, -0.0801174104020341,
      -0.106242797911538, -0.132507342053711, -0.258951198776624,
      0.194401379926649, -0.125614849094244, -0.123092782793666,
      -0.137501445786316, -0.164520248347031, -0.213618071135727,
      -0.11087884822638, -0.117511265919904, -0.0378785568112836,
      -0.105063238524209, -0.187353017477399, -0.176984641937332,
      0.117545981635289, -0.282081926394551, -0.0902309627271172,
      0.288368101560038, 0.264584264993113, 0.20483785732107,
      -0.117517571776709, 0.237902140337953, -0.0882483453193175,
      -0.114893311084856, 0.0210590789693876, 0.13661115887871,
      -0.173706105105985, 0.37300697335202, 0.18611435693846,
      -0.149337896488004, -0.0919837774487157, -0.106184088528587,
      -0.111607362269377, 0.199464409226107, -0.112069294228774,
      0.0453200287015351, -0.00179562351302895, -0.197807346607237,
      0.0897443322859068, 0.28201726446008, 0.186490067946138,
      -0.264303811895368, -0.203299335432674, -0.209524299492024,
      0.0498033596162786, -0.131047450364706, 0.173526399600662,
      -0.00856416328190131, -0.0821805397468096, 0.0483201232616075,
      -0.099153996516797, -0.212956294600266, -0.131784269424495,
      0.272354753663315, -0.263920083064173, 0.223915048379411,
      0.228697897957202, 0.13307487868701, -0.102628411578425,
      0.140673959887494, -0.029764958779971, -0.0964563935589645,
      -0.227366404112367, -0.179990789945361, 0.0776019099621221,
      0.302321608098183, -0.222848190681785, 0.165930427691084,
      0.334143056717383, -0.0746970304868793, -0.0909918525716294,
      -0.0340618335155448, -0.168564850781471, -0.0566961655446379,
      -0.149966061888768, -0.18627175122299, -0.121671765752074,
      0.0161100676649363, -0.0502086577948348, -0.105801090028056,
      0.211997674611785, -0.233586160666175, 0.140872253786707,
      -0.0831812772069842,
    ];

    const trace1 = {
      x: xValues1,
      y: yValues1,
      mode: 'markers',
      type: 'scatter',
      name: 'Trace 1',
      marker: { color: '#4C62D0', size: 8 },
    };

    // Trace 2: 100 random data points
    let xValues2 = [
      0.264741491529819, 0.242756328689681, 0.271259453650322,
      0.154017491276299, -0.291914780728674, -0.143888280695649,
      -0.231563756739686, -0.150944545671951, 0.130629551983955,
      0.104144711691132, 0.393766248246823, 0.148558438305312,
      0.242166954771522, -0.113511123373006, 0.133850986087852,
      0.153449938456028, 0.0272750728211663, -0.0649906369929946,
      0.156195457034676, 0.226165783229113, -0.134758979968665,
      0.030696415091992, 0.240924121817425, 0.13601596813749, 0.216862509654153,
      0.248680425259603, 0.339631813627381, -0.26357630417377,
      0.213708578514955, 0.384968175523578, 0.266373912169202,
      0.193139368381117, 0.207180728523293, 0.287867755391843,
      0.0473703994401487, 0.369018661384974, 0.353290238458742,
      -0.310320539747309, -0.256376880310505, 0.24271715174287,
      -0.11896316916876, 0.216281239075814, -0.156405180847242,
      0.278838148791849, -0.248652910425708, -0.266597355585738,
      0.0906554654403235, -0.131391665816778, -0.14927632840359,
      0.124178411951114, 0.168749145483802, -0.251572062658644,
      -0.102326275946326, -0.0244238531924586, 0.0305385680750668,
      -0.183633842420205, -0.161743854824138, 0.0445452918574585,
      -0.142782119957492, -0.29677093460231, -0.150169126610821,
      0.143615742508841, 0.175905497637669, 0.245849164820162,
      -0.109240329466712, -0.145848020839987, -0.16166153999581,
      -0.119087926716921, -0.177259661775871, -0.082421346352202,
      0.143353359281417, 0.248315632085102, 0.20287721465919,
      -0.0911995463533239, -0.192069475893535, -0.0869994941232438,
      0.0500750725108406, 0.153326673868431, -0.155976422014782,
      -0.0909913587065587, -0.269953356697533, -0.169016047673545,
      0.123583573081092, -0.0370550846162591, 0.101990831091854,
      -0.0894891016078156, -0.0943466539764456, 0.0575607163212003,
      -0.159897933759382, -0.0214647293447585, 0.106640125403107,
      0.10806108207192, -0.0553182411306102, -0.0357641482142721,
      0.376720668567883, -0.0944044777238687, -0.11030285244796,
      0.0055122128796954, 0.0859783224085792, 0.20101516744683,
    ];
    let yValues2 = [
      0.223871660385703, -0.17179801216051, 0.215066457044657,
      -0.208139526537489, 0.0703774922677844, -0.10660824994884,
      -0.0476005610518125, 0.0135092617797983, -0.101058556475994,
      0.017108883339078, 0.128074316927286, -0.181856667471231,
      -0.210458251378475, -0.286890100550773, -0.0254693931926062,
      0.129761055452745, 0.170580145842935, 0.191942830569391,
      -0.0922972275515539, 0.125236307811316, 0.19833691833886,
      -0.0407510862325624, -0.137396408038462, 0.203772241115238,
      0.0177125967931267, -0.197888857671034, 0.176399980836659,
      -0.131000037835698, -0.0646729978240878, 0.115974688478009,
      -0.179949738444742, 0.17815817715748, -0.0383482604408989,
      0.306550215053685, -0.106810359897148, -0.0165029829752971,
      -0.196065046850178, 0.226266016012582, 0.291407766343713,
      -0.021802273210406, -0.150810912660163, -0.14816133645182,
      0.153414020304632, 0.0673133444742317, -0.0192761679531519,
      -0.183387647562213, 0.011664194700549, 0.0856343730119921,
      -0.10295842368474, -0.147626761268499, 0.208111698092509,
      0.284869924170301, -0.0901570279344521, -0.276364313891734,
      -0.164369182032336, -0.17623070001698, 0.128669180890676,
      0.0887660937759413, 0.227816308661049, -0.226057324271887,
      -0.149642738761359, -0.206851234973615, -0.135984071647652,
      -0.142730997004843, -0.184379966062318, -0.145239400317854,
      0.0842375329064059, 0.0941796558184218, 0.0893843363453402,
      -0.197640874094835, -0.0424094491049419, 0.109449517186714,
      -0.0807077281061356, 0.346598962571838, 0.275389747202505,
      0.204802227702923, -0.133364753617085, -0.0541487735232418,
      -0.101833436104433, -0.205902379943302, -0.0886504647686117,
      0.164641933709816, 0.174122952950703, -0.113332646981608,
      0.130687362136867, -0.170842340182986, -0.0761682067563886,
      0.19810643595436, -0.166226767014643, -0.262356561019838,
      -0.0955526714302051, -0.142883174255809, 0.0522760266799663,
      -0.135393086819102, 0.0563414746672145, -0.033595041584171,
      -0.13637091155515, 0.182221106086471, 0.168916692340277, 0.148624744268,
    ];

    const trace2 = {
      x: xValues2,
      y: yValues2,
      mode: 'markers',
      type: 'scatter',
      name: 'Trace 2',
      marker: {
        color: '#DB4BA6',
        size: 8,
        line: {
          color: '#DB4BA6',
          width: 1,
        },
        hoverinfo: 'x+y',
      },
    };

    // // Trace 3: 100 random data points
    // let xValues3 = [];
    // let yValues3 = [];
    // for (let i = 0; i < 100; i++) {
    //   xValues3.push(Math.random() * 100);
    //   yValues3.push(Math.random() * 100);
    // }

    // const trace3 = {
    //   x: xValues3,
    //   y: yValues3,
    //   mode: 'markers',
    //   type: 'scatter',
    //   name: 'Trace 3',
    //   marker: { color: '#3DD879', size: 8 },
    // };

    const savedLassoPoints = JSON.parse(
      localStorage.getItem('lassoPoints') || 'null'
    );

    const savedBoxRange = JSON.parse(
      localStorage.getItem('boxRange') || 'null'
    );

    let graphPath = [];
    let cornerPoints = [];
    if (savedLassoPoints) {
      // Create a shape that corresponds to the lasso selection
      graphPath.push({
        type: 'path',
        path: this.generatePathFromLassoPoints(savedLassoPoints),
        fillcolor: 'rgba(0,100,200,0.1)', // Adjust as needed
        line: {
          color: 'rgba(0,100,200,0.5)',
        },
      });
    } else if (savedBoxRange) {
      graphPath.push({
        type: 'rect',
        x0: savedBoxRange.xRange[0],
        x1: savedBoxRange.xRange[1],
        y0: savedBoxRange.yRange[0],
        y1: savedBoxRange.yRange[1],
        fillcolor: 'rgba(0,100,200,0.1)', // Adjust as needed
        line: {
          color: 'rgba(0,100,200,0.5)',
        },
      });

      cornerPoints = [
        {
          x: [
            savedBoxRange.xRange[0],
            savedBoxRange.xRange[1],
            savedBoxRange.xRange[1],
            savedBoxRange.xRange[0],
          ],
          y: [
            savedBoxRange.yRange[0],
            savedBoxRange.yRange[0],
            savedBoxRange.yRange[1],
            savedBoxRange.yRange[1],
          ],
          mode: 'markers',
        },
      ];
  
    }


    this.graph = {
      data: [trace1, trace2],
      layout: {
        width: 650,
        height: 600,
        title: 'A Fancy Plot',
        xaxis: {
          showgrid: false,
        },
        yaxis: {
          showgrid: false,
        },
        shapes: graphPath,
      },
      config: {
        displaylogo: false,
        displayModeBar: true,
        modeBarButtonsToRemove: ['zoomIn2d'],
      },
    };

    console.log(this.graph);
  }

  generatePathFromLassoPoints(points: any) {
    let path = 'M' + points.x[0] + ',' + points.y[0];
    for (let i = 1; i < points.x.length; i++) {
      path += ' L' + points.x[i] + ',' + points.y[i];
    }
    path += ' Z'; // Close the path
    return path;
  }

  selectedData(event: any) {
    console.log(event);
    localStorage.removeItem('lassoPoints');

    if (event && event.lassoPoints) {
      const lassoPoints = event.lassoPoints;
      localStorage.setItem('lassoPoints', JSON.stringify(lassoPoints));
    }
    if (event && event.range) {
      const xRange = [event.range.x[0], event.range.x[1]];
      const yRange = [event.range.y[0], event.range.y[1]];

      // Save box range for future use
      localStorage.setItem(
        'boxRange',
        JSON.stringify({
          xRange,
          yRange,
        })
      );
    }
  }

  relayout(event: any) {
    console.log(event);

    if (event.dragmode === 'lasso') {
      localStorage.removeItem('boxRange');
      // PlotlyJS.relayout(this.embeddingsPlotID, this.graph.layout);
    } else if (event.dragmode === 'select') {
      localStorage.removeItem('lassoPoints');
      // PlotlyJS.relayout(this.embeddingsPlotID, this.graph.layout);
    }
    // Check if the event corresponds to marker movement
    if ('x' in event && 'y' in event) {
      // Fetch the current box shape
      const currentBox = this.graph.layout.shapes[0];

      // Calculate the new boundaries for the box
      const xVals = [...this.graph.data[2].x, event.x];
      const yVals = [...this.graph.data[2].y, event.y];

      const xRange = [Math.min(...xVals), Math.max(...xVals)];
      const yRange = [Math.min(...yVals), Math.max(...yVals)];

      // Prepare the updates object
      const updates = {
        'shapes[0].x0': xRange[0],
        'shapes[0].x1': xRange[1],
        'shapes[0].y0': yRange[0],
        'shapes[0].y1': yRange[1],
      };

      // Save the new box range to localStorage
      localStorage.setItem(
        'boxRange',
        JSON.stringify({
          xRange,
          yRange,
        })
      );

      // Redraw the graph with the new layout
      PlotlyJS.relayout(this.embeddingsPlotID, updates as any);
    }
  }
}
